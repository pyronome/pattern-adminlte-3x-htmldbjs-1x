<?php
/**
 * Class {{$ __value__}}
 * Implements {{$ __value__}} Class properties and methods and
 * handles {{$ __value__}} Class database transactions.	
 */

// BEGIN: Deny direct access
if (strtolower(basename($_SERVER['PHP_SELF']))
		== strtolower(basename(__FILE__))) {
	header('HTTP/1.0 404 Not Found');
	header('Status: 404 Not Found');
	die();
} // if (strtolower(basename($_SERVER['PHP_SELF']))
// END: Deny direct access

	/* {{@snippet:model_define_constants}} */

// BEGIN: Class Declaration
class {{$ __value__}} {

	// Public Properties
	public $id = 0;
	public $deleted = false;
	public $creationDate = 0;
	public $lastUpdate = 0;
{{MODEL{{$ ../__item_index__/__value__}}_DEFINE_PROPERTIES}}
	/* {{@snippet:begin_model_declaration}} */
    public $bufferSize = 0;
    public $page = 0;
    public $list = array();
    public $listCount = 0;

	// Private Properties
    private $__mySQLConnection = NULL;
    private $__columnValues = NULL;
    private $__filters = array();
    private $__propertySortOrder = NULL;
    private $__columnSortOrder = NULL;
    private $__searchText = '';
    private $__searchTextRegularExpression = false;
    private $__searchTextCaseSensitive = false;
    private $__pageCount = 0;
    private $__totalListCount = 0;
    private $__filterScopeProperty = '';

	/**
     * {{$ __value__}} Constructor
     */
	public function __construct($object = NULL) {
		/* {{@snippet:begin_model_construct}} */

        if (is_numeric($object)) {
        	$this->id = intval($object);
			$this->revert();
        } else if ($object !== NULL) {
			$this->assign($object);	
		} else {
			$this->reset();	
		} // if ($object !== NULL) {
        /* {{@snippet:end_model_construct}} */
	}

    /**
     * reset - Resets properties of this instance to the default values.
     */
	public function reset() {
    	/* {{@snippet:begin_model_reset}} */
		$this->deleted = false;
		$this->creationDate = time();
		$this->lastUpdate = time();
{{MODEL{{$ ../__item_index__/__value__}}_RESET_PROPERTIES}}

        $this->clearList();
        $this->bufferSize = 0;
        $this->page = 0;

    	$this->__columnValues = array();
        $this->__filters = array();
        $this->__mySQLConnection = NULL;
        $this->__propertySortOrder = array();
        $this->__columnSortOrder = array();
        $this->__searchText = '';
        $this->__searchTextRegularExpression = false;
        $this->__searchTextCaseSensitive = false;
        $this->__pageCount = 0;
        $this->__totalListCount = 0;
        $this->__filterScopeProperty = '';
        /* {{@snippet:end_model_reset}} */
	}

    /**
     * install - Creates necessary database tables, directories and caches necessary values
     *
     * @return void
     */
    public function install() {

        $this->connectMySQLServer();

        // Update MySQL Table
        $SQLText = 'SHOW TABLES LIKE "{{$ __value__/__lowercase_text__}}table"';

        $result = $this->__mySQLConnection->query($SQLText);
    
        if ($result && ($result->num_rows > 0)) {

            // Backup Old Table If Exits        
            $backupTableName = ('bck_{{$ __value__/__lowercase_text__}}table' . date('YmdHis'));
            $SQLText = 'CREATE TABLE `'
                    . $backupTableName
                    . '` LIKE `{{$ __value__/__lowercase_text__}}table`;';
            $this->__mySQLConnection->query($SQLText);
            $SQLText = 'INSERT `'
                    . $backupTableName
                    . '` SELECT * FROM `{{$ __value__/__lowercase_text__}}table`;';
            $this->__mySQLConnection->query($SQLText);

        } else {

            // Create Table If Not Exists
            $SQLText = 'CREATE TABLE `{{$ __value__/__lowercase_text__}}table` (
                `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
                `deleted` CHAR(1) NOT NULL DEFAULT \'0\',
                `creationdate` DATETIME,
                `lastupdate` DATETIME,
                PRIMARY KEY  (`id`)) ENGINE=\'MyISAM\' ROW_FORMAT=FIXED;';
            $this->__mySQLConnection->query($SQLText);

        } // if ($result && ($result->num_rows > 0)) {

{{MODEL{{$ ../__item_index__/__value__}}_INSTALL_METHOD}}
    }

	/**
	 * clearList - clears objects in the list array
	 * 
	 * @return void
	 */
	public function clearList() {
		/* {{@snippet:begin_model_clearlist}} */
        $listCount = count($this->list);
        for ($i = 0; $i < $listCount; $i++) {
            unset($this->list[$i]); 
        } // for ($i = 0; $i < $listCount; $i++) {
        $this->list = array();
        $this->listCount = 0;
        /* {{@snippet:end_model_clearlist}} */
	}

    /**
     * recalculate - Recalculates property values.
     */
    public function recalculate() {
		/* {{@snippet:begin_model_recalculate}} */

{{MODEL{{$ ../__item_index__/__value__}}_RECALCULATE}}

		includeLibrary('getRunTimeData');
		$bulk = getRunTimeData('__bulkOperationMode');
		if (null !== $bulk) {
			$this->extractColumnValues();
		} // if (!$bulk) {

		/* {{@snippet:end_model_recalculate}} */
	}

	/**
     * assign - Copies a {{$ __value__}} instance to this instance.
     *
     * @param obj{{$ __value__}} [{{$ __value__}}][in]: {{$ __value__}} instance to be copied
     */
	public function assign($object) {
    	/* {{@snippet:begin_model_assign}} */
		$this->id = $object->id;
		$this->deleted = $object->deleted;
		$this->creationDate = $object->creationDate;
		$this->lastUpdate = $object->lastUpdate;
{{MODEL{{$ ../__item_index__/__value__}}_ASSIGN}}
    	/* {{@snippet:end_model_assign}} */
        $this->recalculate();
	}

	/**
	 * request - Extracts and assign class property values from $_REQUEST, $_POST, $_GET arrays.
	 *
	 * @param requests [Array][in]: Array of request values
	 * @param prefix [String][in]: Request variable name prefix
	 *
	 * @return void
	 */
	public function request($requests = NULL, $prefix = '') {

		if (NULL == $requests) {
			$requests = $_REQUEST;
		} // if (NULL == $requests) {

		$this->id = isset($requests[$prefix . 'id'])
				? intval($requests[$prefix . 'id'])
				: 0;

		if ($this->id > 0) {
			$this->revert();
		} // if (($this->id > 0) && $revertInstance) {
		
		$this->deleted = isset($requests[$prefix . 'deleted'])
				? intval($requests[$prefix . 'deleted'])
				: $this->deleted;

{{MODEL{{$ ../__item_index__/__value__}}_REQUEST_INPUTFIELDS}}

	}

	/**
     * get - gets the value of the specified property.
     *
     * @param propertyName [String][in]: Property name in 'Class/Property' format
     *
     * @return returns the value of property.
     */
	public function get($propertyName) {

		$propertyNameTokens = explode('/', $propertyName);

		if (isset($propertyNameTokens[1])) {
			$propertyName = $propertyNameTokens[1];
		} else {
			$propertyName = $propertyNameTokens[0];
		} // if (isset($propertyNameTokens[1])) {

		if (property_exists($this, $propertyName)) {
			return $this->$propertyName;
		} // if (property_exists($this, $propertyName))

		return false;
	}
	
	public function getOptionIndex($propertyName, $selection) {
		$options = $this->getOptionValues($propertyName);
		return array_search($selection, $options);
	}

	/**
     * set - sets the value of the specified property.
     *
     * @param propertyName [String][in]: Property name in 'Class/Property' format
     * @param value [Variant][in]: Property new value
     *
     * @return void.
     */
	public function set($propertyName, $value) {

		$propertyNameTokens = explode('/', $propertyName);

		if (isset($propertyNameTokens[1])) {
			$propertyName = $propertyNameTokens[1];
		} else {
			$propertyName = $propertyNameTokens[0];
		} // if (isset($propertyNameTokens[1])) {

		if (property_exists($this, $propertyName)) {
			$this->$propertyName = $value;
		} // if (property_exists($this, $propertyName)) {

	}

	/**
     * validate - Validates this instance record
     *
     * @return Returns empty array on success, error messages array on failure.
     */
	public function validate() {
		$errors = array();
		/* {{@snippet:begin_model_validate}} */
{{MODEL{{$ ../__item_index__/__value__}}_VALIDATE}}
		/* {{@snippet:end_model_validate}} */

		return $errors;
	}

	/**
     * insert - Inserts a database record of this instance.
     *
     * @param bulk [boolean][in]: Specifies if update operation will be repeated more than once.
     *
     * @return Returns newly created {{$ __value__}} id on success, false on failure.
     */
	public function insert() {

        $this->recalculate();
        $this->doBeforeInsert();
        /* {{@snippet:begin_model_insert}} */
		$SQLText = 'INSERT INTO `{{$ __value__/__lowercase_text__}}table` '
				. '(`deleted`,'
				. '`creationdate`,'
				. '`lastupdate`'{{MODEL{{$ ../__item_index__/__value__}}_INSERT_FIELDS}}
                . ') '
				. 'VALUES ({{deleted}}, NOW(), NOW() '{{MODEL{{$ ../__item_index__/__value__}}_INSERT_VALUES}}
                . ');';

		$this->connectMySQLServer();

		$SQLText = str_replace('{{deleted}}', intval($this->deleted), $SQLText);{{MODEL{{$ ../__item_index__/__value__}}_SQL_STRREPLACE}}

        $this->__mySQLConnection->query($SQLText); 

		$this->id = $this->__mySQLConnection->insert_id;

		{{MODEL{{$ ../__item_index__/__value__}}_INSERT_FOREIGN_TABLES}}

		/* {{@snippet:end_model_insert}} */
		$this->doAfterInsert();
		$this->cache();
		
		if (includeLibrary('create_insert_log')) {
			create_insert_log($this);
    	} // if (includeLibrary('create_insert_log')) {

		return $this->id;

	}

    /**
     * update - Updates this instance record in the database.
     *
     * @param bulk [boolean][in]: Specifies if update operation will be repeated more than once.
     *
     * @return Returns true on success, false on failure.
     */
	public function update() {
		$this->recalculate();
		
    	/* {{@snippet:begin_model_update}} */
        if (0 == $this->id) {
            return $this->insert();
        } // if (0 == $this->id) {
    	
    	if (intval($this->deleted) > 0) {
            $this->deleted = false;
            return $this->delete();
        } // if (intval($this->deleted) > 0) {

        $this->doBeforeUpdate();
		
		if (includeLibrary('create_update_log')) {
			$oldObject = new {{$ __value__}}($this->id);
			create_update_log($oldObject, $this);
    	} // if (includeLibrary('create_update_log')) {

		$SQLText = 'UPDATE `{{$ __value__/__lowercase_text__ }}table` SET '
				. '`deleted`={{deleted}},'
				. '`lastupdate`=NOW() '{{MODEL{{$ ../__item_index__/__value__}}_UPDATE_SQL}}
				. ' WHERE `id`={{id}};';
		
		$this->connectMySQLServer();

		$SQLText = str_replace('{{id}}', intval($this->id), $SQLText);
		$SQLText = str_replace('{{deleted}}', intval($this->deleted), $SQLText);{{MODEL{{$ ../__item_index__/__value__}}_SQL_STRREPLACE}}
        /* {{@snippet:end_model_update}} */
        $success = $this->__mySQLConnection->query($SQLText);
		{{MODEL{{$ ../__item_index__/__value__}}_UPDATE_FOREIGN_TABLES}}
        $this->cache();
        $this->doAfterUpdate();

        return $success;

	}

	/**
     * revert - Reloads and overwrites original record values from database.
     *
     * @param fromCache [Boolean][in]: Revert either from db or cache
     *
     * @return Returns true on success, false on failure.
     */
	public function revert($fromCache = true) {
		/* {{@snippet:begin_model_revert}} */

		$this->id = intval($this->id);

		$fileIndex = intval(intval($this->id) / 1000);
    	$cacheFilePath = sha1(strtolower(__CLASS__));
		$cacheFilePath = (substr($cacheFilePath, 0, 2)
				. '/'
				. substr($cacheFilePath, 2, 12)
				. '/'
				. $fileIndex
				. '/'
				. $this->id
				. '.php');
		$cacheFilePath = (DIR . '/cache/' . $cacheFilePath);

    	if ($fromCache && file_exists($cacheFilePath)) {

	        $cache = array();
	        $cachedObject = array();

	        include($cacheFilePath);

	        if (isset($cache[$this->id])) {

		        $cachedObject = $cache[$this->id];

		        unset($cache);

	            $cachePropertyKeys = array_keys($cachedObject);
	            $cachePropertyCount = count($cachePropertyKeys);

	            for ($i = 0; $i < $cachePropertyCount; $i++) {

	                $cachePropertyName = $cachePropertyKeys[$i];
	                $this->$cachePropertyName = $cachedObject[$cachePropertyKeys[$i]];

	            } // for ($j = 0; $j < $cachePropertyCount; $j++) {

	            $this->recalculate();

	        } // if (isset($cache[$this->id])) {

    	} else {

			$SQLText = 'SELECT * FROM `{{$ __value__/__lowercase_text__ }}` WHERE `id`={{id}};';
			$SQLText = str_replace('{{id}}', intval($this->id), $SQLText);

			$this->connectMySQLServer();
			$result = $this->__mySQLConnection->query($SQLText); 

			if ($result) {

				$row = $result->fetch_array(MYSQLI_ASSOC);
				$this->id = $row['id'];
				$this->deleted = intval($row['deleted']);
				$this->creationDate = strtotime($row['creationdate']);
				$this->lastUpdate = strtotime($row['lastupdate']);{{MODEL{{$ ../__item_index__/__value__}}_REVERT}}

				if ($fromCache && !file_exists($cacheFilePath)) {
					$this->cache();
				} // if ($fromCache && !file_exists($cacheFilePath)) {

	            $result->free();
	            /* {{@snippet:end_model_revert}} */
	            return true;

			} // if ($result) {

    	} // if ($fromCache) {

    	return false;

	}

	/**
     * delete - Deletes this instance from database. This function sets deleted
     * value to 1 on the first call, and deletes instance record from database
     * on the second call.
     *
     * @param bulk [boolean][in]: Specifies if update operation will be repeated more than once.
     *
     * @return Returns true on success, false on failure.
     */
	public function delete() {

		$this->doBeforeDelete();
    	/* {{@snippet:begin_model_delete}} */
		if ($this->deleted) {
			$SQLText = 'DELETE FROM `{{$ __value__/__lowercase_text__ }}table` '
					. ' WHERE `id`={{id}};';
		} else {
			$SQLText = 'UPDATE `{{$ __value__/__lowercase_text__ }}table` SET '
					. '`deleted`=1'
					. ' WHERE `id`={{id}};';

			$this->deleted = true;
		} // if ($this->deleted) {

		$SQLText = str_replace('{{id}}', intval($this->id), $SQLText);

		$this->connectMySQLServer();
        /* {{@snippet:end_model_delete}} */

        $success = $this->__mySQLConnection->query($SQLText);

        $this->doAfterDelete();
		$this->cache();
        
        if (includeLibrary('create_delete_log')) {
			create_delete_log($this);
    	} // if (includeLibrary('create_delete_log')) {
    		
		return $success;

	}

	/**
	 * cache - caches the critical property values for quick search and sorting
	 * purposes.
	 *
	 * @param bulk [Boolean][in]: Specifies if bulk cache operation is being made or not
	 *
	 * @return void.
	 */
	public function cache() {
		
		$this->id = intval($this->id);

		global $_SPRIT;

		$bulk = isset($_SPRIT['RUNTIME_DATA']['__bulkOperationMode']);

		if (!$this->deleted) {
			$propertyValues = $this->getCacheArray($this);

			includeLibrary('cacheValues');
			cacheValues(__CLASS__, $this->id, $propertyValues);

			if (file_exists(DIR . '/events/on{{$ __value__}}Cache.php')) {
				require_once(DIR . '/events/on{{$ __value__}}Cache.php');
				on{{$ __value__}}Cache($this, $this->id, $propertyValues, $bulk);
			} // if (file_exists(DIR . '/events/on{{$ __value__}}Cache.php')) {

		} else {

			includeLibrary('uncacheValues');
			uncacheValues(__CLASS__, $this->id);

			if (file_exists(DIR . '/events/on{{$ __value__}}Uncache.php')) {
				require_once(DIR . '/events/on{{$ __value__}}Uncache.php');
				on{{$ __value__}}Uncache($this, $this->id, $bulk);
			} // if (file_exists(DIR . '/events/on{{$ __value__}}Uncache.php')) {

		} // if (!$this->deleted) {

	}

	/**
	 * cacheObjects - caches all objects with the given array of ids.
	 *
	 * @param listOfIds [Array][in]: List of ids to be cached
	 *
	 * @return void.
	 */
	public function cacheObjects($listOfIds) {
		global $_SPRIT;

		if (0 == count($listOfIds)) {
			return;
		} // if (0 == count($listOfIds)) {

		$SQLText = 'SELECT * FROM `{{$ __value__/__lowercase_text__}}table` WHERE `id` IN ({{list_of_ids}});';
		$SQLText = str_replace('{{list_of_ids}}', implode(',', $listOfIds), $SQLText);

		$this->connectMySQLServer();
		$result = $this->__mySQLConnection->query($SQLText);

		$propertyValues = [];

		includeLibrary('cacheValues');

		$object = new {{$ __value__}}();

        while ($row = $result->fetch_array(MYSQLI_ASSOC)) {

        	$object->id = intval($row['id']);
        	$object->deleted = intval($row['deleted']);
        	$object->creationDate = strtotime($row['creationdate']);
        	$object->lastUpdate = strtotime($row['lastupdate']);{{MODEL{{$ ../__item_index__/__value__}}_CACHE_OBJECTS}}

	        $propertyValues = $this->getCacheArray($object);

			cacheValues(__CLASS__, $row['id'], $propertyValues);

        } // while ($row = mysql_fetch_array($arrResult)) {
                
        $result->free();

	}

	public function getCacheArray($object) {
		$propertyValues = array();

		$propertyValues['id'] = $object->id;
		$propertyValues['creationDate'] = $object->creationDate;
		$propertyValues['lastUpdate'] = $object->lastUpdate;{{MODEL{{$ ../__item_index__/__value__}}_CACHE_ARRAY_PROPERTIES}}
		
		// Display Texts
		includeLibrary('getObjectDisplayTexts');
        $displayTexts = getObjectDisplayTexts('{{$ __value__}}', $object);

        $propertyValues['id/display_text'] = $displayTexts['id'];
        $propertyValues['creationDate/display_text'] = $displayTexts['creationDate'];
        $propertyValues['lastUpdate/display_text'] = $displayTexts['lastUpdate'];{{MODEL{{$ ../__item_index__/__value__}}_CACHE_ARRAY_DISPLAYTEXTS}}

		// Display Texts
        $displayTexts = getObjectDisplayTexts('{{$ __value__}}', $object);

		return $propertyValues;
	}

	/**
     * clearFilters - clears current criteria
     *
     * @return Returns void
     */
    public function clearFilters() {

        $this->reset();

    }

    /**
     * addFilter - adds filter criteria
     *
     * @param property [String][in]: Property name
     * @param operator [String][in]: Operator in string e.g. '==', '!=', '<', '<=', etc.
     * @param value [][in]: Criteria value, or value array (for in and not in values)
     *
     * @return Returns void
     */       
    public function addFilter($property, $operator, $value) {

        $propertyTokens = explode('/', $property);
        $property = $propertyTokens[count($propertyTokens) - 1];

        $operator = strtolower($operator);

        switch($operator) {

            case '==':

                if (is_array($value)) {

                	if (!isset($this->__filters[($property . 'InValues')])) {
                		$this->__filters[($property . 'InValues')] = array();
                	} // if (!isset($this->__filters[($property . 'InValues')])) {

                    $this->__filters[($property . 'InValues')]
                            = $this->__filters[($property . 'InValues')]
                            + $value;
                } else {
                    $this->__filters[($property . 'InValues')][] = $value;
                } // if (is_array($value)) {

            break;
            case 'like':

                if (is_array($value)) {

                	if (!isset($this->__filters[($property . 'LikeValues')])) {
                		$this->__filters[($property . 'LikeValues')] = array();
                	} // if (!isset($this->__filters[($property . 'LikeValues')])) {

                    $this->__filters[($property . 'LikeValues')]
                            = $this->__filters[($property . 'LikeValues')]
                            + $value;
                } else {
                    $this->__filters[($property . 'LikeValues')][] = $value;
                } // if (is_array($value)) {

            break;
            case '!=':

                if (is_array($value)) {

                	if (!isset($this->__filters[($property . 'NotInValues')])) {
                		$this->__filters[($property . 'NotInValues')] = array();
                	} // if (!isset($this->__filters[($property . 'NotInValues')])) {

                    $this->__filters[($property . 'NotInValues')]
                            = $this->__filters[($property . 'NotInValues')]
                            + $value;
                } else {
                    $this->__filters[($property . 'NotInValues')][] = $value;
                } // if (is_array($value)) {

            break;
            case '!like':
            case 'notlike':
            case 'not like':

                if (is_array($value)) {

                	if (!isset($this->__filters[($property . 'NotLikeValues')])) {
                		$this->__filters[($property . 'NotLikeValues')] = array();
                	} // if (!isset($this->__filters[($property . 'NotLikeValues')])) {

                    $this->__filters[($property . 'NotLikeValues')]
                            = $this->__filters[($property . 'NotLikeValues')]
                            + $value;
                } else {
                    $this->__filters[($property . 'NotLikeValues')][] = $value;
                } // if (is_array($value)) {

            break;
            case '<':
                $this->__filters[($property . 'MaxExclusive')] = $value;
            break;
            case '<=':
                $this->__filters[($property . 'MaxInclusive')] = $value;
            break;
            case '>':
                $this->__filters[($property . 'MinExclusive')] = $value;
            break;
            case '>=':
                $this->__filters[($property . 'MinInclusive')] = $value;
            break;

        } // switch($operator) {

    }

    /**
     * removeFilter - removes previously added filter criteria
     *
     * @param property [String][in]: Property name
     *
     * @return Returns void
     */       
    public function removeFilter($property) {

        $propertyTokens = explode('/', $property);
        $property = $propertyTokens[count($propertyTokens) - 1];

        if (isset($this->__filters[($property . 'InValues')])) {
            unset($this->__filters[($property . 'InValues')]);
        } // if (isset($this->__filters[($property . 'InValues')])) {

        if (isset($this->__filters[($property . 'NotInValues')])) {
            unset($this->__filters[($property . 'NotInValues')]);
        } // if (isset($this->__filters[($property . 'NotInValues')])) {

        if (isset($this->__filters[($property . 'MaxExclusive')])) {
            unset($this->__filters[($property . 'MaxExclusive')]);
        } // if (isset($this->__filters[($property . 'MaxExclusive')])) {

        if (isset($this->__filters[($property . 'MaxInclusive')])) {
            unset($this->__filters[($property . 'MaxInclusive')]);
        } // if (isset($this->__filters[($property . 'MaxInclusive')])) {

        if (isset($this->__filters[($property . 'MinExclusive')])) {
            unset($this->__filters[($property . 'MinExclusive')]);
        } // if (isset($this->__filters[($property . 'MinExclusive')])) {

        if (isset($this->__filters[($property . 'MinInclusive')])) {
            unset($this->__filters[($property . 'MinInclusive')]);
        } // if (isset($this->__filters[($property . 'MinInclusive')])) {

    }

    /**
     * addSearchText - adds quick search text criteria
     *
     * @param searchText [String][in]: Text to be search
     * @param searchTextRegularExpression [Boolean][in]: Specifies whether
     * search text includes regular expression or not
     * @param searchTextCaseSensitive [Boolean][in]: Specifies whether
     * search text is case sensitive or not
     *
     * @return Returns void
     */
    public function addSearchText($searchText, $searchTextRegularExpression = false, $searchTextCaseSensitive = false) {

        $this->__searchText = $searchText;
        $this->__searchTextRegularExpression = $searchTextRegularExpression;
        $this->__searchTextCaseSensitive = $searchTextCaseSensitive;

    }

    /**
     * sortByProperty - adds property sorting criteria
     *
     * @param propertyName [String][in]: Property name
     * @param ascending [Boolean][in]: Is sorting ascending
     *
     * @return void.
     */
    public function sortByProperty($propertyName, $ascending = true) {

        $this->__columnSortOrder = array();
        $this->__propertySortOrder[] = ((($ascending) ? 'a:' : 'd:') . $propertyName);

    }

    /**
     * sortByPropertyCSV - adds property sorting criteria in CSV format
     *
     * @param propertyCSV [String][in]: Property names in '+FirstName,-LastName' format
     *
     * @return void.
     */
    public function sortByPropertyCSV($propertyCSV) {

        $this->__columnSortOrder = array();

        $propertyList = explode(',', $propertyCSV);
        $propertyListCount = count($propertyList);
        $ascending = false;

        for ($i = 0; $i < $propertyListCount; $i++) {
        	$ascending = ('+' == trim($propertyList[$i][0]));
        	$this->__propertySortOrder[] = ((($ascending) ? 'a:' : 'd:')
        			. substr(trim($propertyList[$i]), 1));
        } // for ($i = 0; $i < $propertyListCount; $i++) {

    }

    /**
     * sortByColumn - adds column sorting criteria
     *
     * @param columnIndex [Integer][in]: Column index
     * @param ascending [Boolean][in]: Is sorting ascending
     *
     * @return void.
     */
    public function sortByColumn($columnIndex, $ascending = true) {

        $this->__propertySortOrder = array();
        $this->__columnSortOrder[] = ((($ascending) ? 'a:' : 'd:') . $columnIndex);

    }

    /**
     * find - Finds {{$ __value__}} instances specified with the listing
     * criteria
     *
     * @return Returns true on success, false on failure.
     */
	public function find() {
    	/* {{@snippet:begin_model_find}} */
    	$this->__filterScopeProperty = '';
    	/* {{@snippet:end_model_find}} */
	    return $this->generateListFromSQL();
	}
	{{MODEL{{$ ../__item_index__/__value__}}_FOREIGN_METHODS}}
    /**
     * getPageCount - returns page count
     *
     * @return Returns page count based on current criteria
     */
    public function getPageCount() {

        return $this->__pageCount;

    }

    /**
     * getTotalListCount - returns total list count based on
     * current criteria
     *
     * @return Returns total list count based on
     * current criteria
     */
    public function getTotalListCount() {

        return $this->__totalListCount;

    }


	/**
	 * doBeforeInsert - Specifies actions to be performed before insert operation
	 *
	 * @return void.
	 */
	public function doBeforeInsert() {
		/* {{@snippet:begin_model_doBeforeInsert}} */
		if (file_exists(DIR . '/events/onBefore{{$ __value__}}Insert.php')) {

			require_once(DIR . '/events/onBefore{{$ __value__}}Insert.php');
			onBefore{{$ __value__}}Insert($this);

		} // if (file_exists(DIR . '/events/onBefore{{$ __value__}}Insert.php')) {
		/* {{@snippet:end_model_doBeforeInsert}} */
	}

	/**
	 * doAfterInsert - Specifies actions to be performed after insert operation
	 *
	 * @return void.
	 */
	public function doAfterInsert() {
		/* {{@snippet:begin_model_doAfterInsert}} */
		if (file_exists(DIR . '/events/onAfter{{$ __value__}}Insert.php')) {

			require_once(DIR . '/events/onAfter{{$ __value__}}Insert.php');
			onAfter{{$ __value__}}Insert($this);

		} // if (file_exists(DIR . '/events/onAfter{{$ __value__}}Insert.php')) {
		/* {{@snippet:end_model_doAfterInsert}} */
	}

	/**
	 * doBeforeUpdate - Specifies actions to be performed before update operation
	 *
	 * @return void.
	 */
	public function doBeforeUpdate() {
		/* {{@snippet:begin_model_doBeforeUpdate}} */
		if (file_exists(DIR . '/events/onBefore{{$ __value__}}Update.php')) {

			require_once(DIR . '/events/onBefore{{$ __value__}}Update.php');
			onBefore{{$ __value__}}Update($this);

		} // if (file_exists(DIR . '/events/onBefore{{$ __value__}}Update.php')) {
		/* {{@snippet:end_model_doBeforeUpdate}} */
	}

	/**
	 * doAfterUpdate - Specifies actions to be performed after update operation
	 *
	 * @return void.
	 */
	public function doAfterUpdate() {
		/* {{@snippet:begin_model_doAfterUpdate}} */
		if (file_exists(DIR . '/events/onAfter{{$ __value__}}Update.php')) {

			require_once(DIR . '/events/onAfter{{$ __value__}}Update.php');
			onAfter{{$ __value__}}Update($this);

		} // if (file_exists(DIR . '/events/onAfter{{$ __value__}}Update.php')) {
		/* {{@snippet:end_model_doAfterUpdate}} */
	}

	/**
	 * doBeforeDelete - Specifies actions to be performed before delete operation
	 *
	 * @return void.
	 */
	public function doBeforeDelete() {
		/* {{@snippet:begin_model_doBeforeDelete}} */
		if (file_exists(DIR . '/events/onBefore{{$ __value__}}Delete.php')) {

			require_once(DIR . '/events/onBefore{{$ __value__}}Delete.php');
			onBefore{{$ __value__}}Delete($this);

		} // if (file_exists(DIR . '/events/onBefore{{$ __value__}}Delete.php')) {
		/* {{@snippet:end_model_doBeforeDelete}} */
	}

	/**
	 * doAfterDelete - Specifies actions to be performed after delete operation
	 *
	 * @return void.
	 */
	public function doAfterDelete() {
		/* {{@snippet:begin_model_doAfterDelete}} */
		if (file_exists(DIR . '/events/onAfter{{$ __value__}}Delete.php')) {

			require_once(DIR . '/events/onAfter{{$ __value__}}Delete.php');
			onAfter{{$ __value__}}Delete($this);

		} // if (file_exists(DIR . '/events/onAfter{{$ __value__}}Delete.php')) {
		/* {{@snippet:end_model_doAfterDelete}} */
	}

	/**
	 * beginBulkOperation - starts bulk operation mode. In this bulk operation mode
	 * FTP connection, MySQL connect, etc. are made only once.
	 *
	 * @return void.
	 */
    public function beginBulkOperation() {

    	includeLibrary('setRunTimeData');
    	includeLibrary('getRunTimeData');

		$bulk = getRunTimeData('__bulkOperationMode');

		if (null !== $bulk) {

			setRunTimeData('__bulkOperationMode', true);
	    	includeLibrary('openFTPConnection');
	    	openFTPConnection();

		} // if (!$bulk) {

    }

	/**
	 * beginBulkOperation - stops bulk operation mode. In this bulk operation mode
	 * FTP connection is made only once.
	 *
	 * @return void.
	 */
    public function endBulkOperation() {

    	includeLibrary('setRunTimeData');
    	includeLibrary('getRunTimeData');

		$bulk = getRunTimeData('__bulkOperationMode');

		if ($bulk) {

			setRunTimeData('__bulkOperationMode', null);
	    	includeLibrary('closeFTPConnection');
	    	closeFTPConnection();

		} // if (!$bulk) {

    }

	/**
     * connectMySQLServer - Opens a MySQLi connection
     *
     * @return void
     */
    private function connectMySQLServer() {
    	/* {{@snippet:begin_model_connectMySQLServer}} */
    	if ($this->__mySQLConnection != NULL) {
        	return;
        } // if ($this->__mySQLConnection != NULL) {
        
        includeLibrary('openMySQLConnection');
        $this->__mySQLConnection = openMySQLConnection();
        /* {{@snippet:end_model_connectMySQLServer}} */
	}

    /**
     * generateListFromSQL - Generates list from SQL code of the current
     * criteria
     *
     * @return Returns true on success, false on failure.
     */
    private function generateListFromSQL() {
    	/* {{@snippet:begin_model_generateListFromSQL}} */
        // Execute SQL Query
        $this->connectMySQLServer();

        $SQLText = $this->getSQLQueryString();

		$result = $this->__mySQLConnection->query($SQLText); 
        
        // Clear List Array
        $this->clearList();
        
        $object = NULL;

        $uncachedIds = [];
        
        // Precache All Records
        while ($row = $result->fetch_array(MYSQLI_ASSOC)) {
			$fileIndex = intval($row['id'] / 1000);
	    	$cacheFilePath = sha1(strtolower(__CLASS__));
			$cacheFilePath = (substr($cacheFilePath, 0, 2)
					. '/'
					. substr($cacheFilePath, 2, 12)
					. '/'
					. $fileIndex
					. '/'
					. $row['id']
					. '.php');
			$cacheFilePath = (DIR . '/cache/' . $cacheFilePath);

			if (!file_exists($cacheFilePath)) {
				$uncachedIds[] = $row['id'];
			} // if (!file_exists($cacheFilePath)) {
        } // while ($row = mysql_fetch_array($arrResult)) {

        $this->cacheObjects($uncachedIds);
        $result->data_seek(0);

        while ($row = $result->fetch_array(MYSQLI_ASSOC)) {
            $object = new {{$ __value__}}();
            $object->id = $row['id'];
            $object->revert();
            $this->list[] = $object;
        } // while ($row = mysql_fetch_array($arrResult)) {
                
        $result->free();

        if (count($this->__columnSortOrder) > 0) {

            $object = new {{$ __value__}}();

            includeLibrary('sortObjectListByColumn');
            sortObjectListByColumn(get_class($object),
                    $this->list,
                    $this->__columnSortOrder,
                    $this->bufferSize,
                    $this->page);

        } // if (count($this->__columnSortOrder) > 0) {

        $this->listCount = count($this->list);
		/* {{@snippet:end_model_generateListFromSQL}} */
        return true;
    }
    
    /**
     * getSQLQueryString - Creates SQL string of the current criteria
     *
     * @return Returns SQL query string
     */
    private function getSQLQueryString() {
    	/* {{@snippet:begin_model_getSQLQueryString}} */
        $selectionSQL = 'SELECT `t0`.`id` FROM `{{$ __value__/__lowercase_text__}}table` AS `t0` ';
        $countSQL = 'SELECT COUNT(`t0`.`id`) FROM `{{$ __value__/__lowercase_text__}}table` AS `t0` ';
        $criteriaSQL = '';
        $sortOrderSQL = '';
        
        // If search text specified first make a class property cache search
        $searchTextIds = array();
        if ($this->__searchText != '') {
            includeLibrary('searchTextInClassColumns');
            $searchTextIds = searchTextInClassColumns(
                    '{{$ __value__}}',
                    $this->__searchText,
                    $this->__searchTextRegularExpression,
                    $this->__searchTextCaseSensitive);
        } // if ($this->__searchText != '') {

        if (count($searchTextIds) > 0) {
            $criteriaSQL = '(`t0`.`id` IN ('
                    . implode(',', $searchTextIds)
                    . ')) ';
        } else if ($this->__searchText != '') {
            $criteriaSQL = '(0) ';            
        } // if (count($searchTextIds) > 0) {

        // Create criteria SQL
        includeLibrary('generateStringSQLCriteria');
        includeLibrary('generateIntegerSQLCriteria');
        includeLibrary('generateBooleanSQLCriteria');
        includeLibrary('generateFloatSQLCriteria');
        includeLibrary('generateDateSQLCriteria');
        includeLibrary('generateDateTimeSQLCriteria');
        includeLibrary('generateTimeSQLCriteria');

        $criteriaSQL = generateIntegerSQLCriteria('id', $this->__filters, $this->__mySQLConnection, $criteriaSQL);
        $criteriaSQL = generateBooleanSQLCriteria('deleted', $this->__filters, $this->__mySQLConnection, $criteriaSQL);
        $criteriaSQL = generateDateTimeSQLCriteria('creationDate', $this->__filters, $this->__mySQLConnection, $criteriaSQL);
        $criteriaSQL = generateDateTimeSQLCriteria('lastUpdate', $this->__filters, $this->__mySQLConnection, $criteriaSQL);{{MODEL{{$ ../__item_index__/__value__}}_GETSQLQUERY_CRITERIA}}

        // Create Sort Order SQL
        $lCount = count($this->__propertySortOrder);
        $sortOrderSQL = '';
        
        for ($i = 0; $i < $lCount; $i++) {
            if ($sortOrderSQL != '') {
                $sortOrderSQL .= ', ';
            } // if ($sortOrderSQL != '') {
            
            switch ($this->__propertySortOrder[$i]) {
                case 'a:id':
                    $sortOrderSQL .= '`t0`.`id` ASC';
                break;
                case 'd:id':
                    $sortOrderSQL .= '`t0`.`id` DESC';
                break;
                case 'a:deleted':
                    $sortOrderSQL .= '`t0`.`deleted` ASC';
                break;
                case 'd:deleted':
                    $sortOrderSQL .= '`t0`.`deleted` DESC';
                break;
                case 'a:creationDate':
                    $sortOrderSQL .= '`t0`.`creationdate` ASC';
                break;
                case 'd:creationDate':
                    $sortOrderSQL .= '`t0`.`creationdate` DESC';
                break;
                case 'a:lastUpdate':
                    $sortOrderSQL .= '`t0`.`lastupdate` ASC';
                break;
                case 'd:lastUpdate':
                    $sortOrderSQL .= '`t0`.`lastupdate` DESC';
                break;{{MODEL{{$ ../__item_index__/__value__}}_GETSQLQUERY_SORTORDER}}
                default:
					if (method_exists($this, 'getForeignSortOrderSQL')) {
						$this->getForeignSortOrderSQL(
								$this->__propertySortOrder[$i],
								$selectionSQL,
								$sortOrderSQL);
					} // if (method_exists($this, 'getForeignSortOrderSQL')) {
                break;
            } // switch ($this->__propertySortOrder[$i]) {
        } // for ($i = 0; $i < $lCount; $i++) {
        
        // Add criteria SQL if necessary
        if ($criteriaSQL != '') {
            $selectionSQL .= ' WHERE '
                    . $criteriaSQL;
            $countSQL .= ' WHERE '
                    . $criteriaSQL;
        } // if ($criteriaSQL != '') {

        // Add sort order SQL if necessary
        if ($sortOrderSQL != '') {
            $selectionSQL .= ' ORDER BY '
                    . $sortOrderSQL;
        } // if ($sortOrderSQL != '') {

        if (0 == count($this->__columnSortOrder)) {
            if ($this->bufferSize > 0) {
                $selectionSQL .= ' LIMIT '
                        . (intval($this->page) * intval($this->bufferSize))
                        . ','
                        . intval($this->bufferSize);
            } // if ($this->bufferSize != 0) {
        } // if (0 == count($this->__columnSortOrder)) {

        // Extract Total Count, Page Count
        $countResult = $this->__mySQLConnection->query($countSQL);  
        $countRow = $countResult->fetch_array(MYSQLI_NUM);
        $this->__totalListCount = $countRow[0];
        $this->__pageCount = 1;
        if ($this->bufferSize > 0) {
            $this->__pageCount = ceil($this->__totalListCount / $this->bufferSize);
        } // if ($this->bufferSize > 0) {
        /* {{@snippet:end_model_getSQLQueryString}} */
        return $selectionSQL;

    }
    {{MODEL{{$ ../__item_index__/__value__}}_GETMULTIPLESELECTIONCSV}}
    {{MODEL{{$ ../__item_index__/__value__}}_PROPERTY_HAS_OPTION_METHODS}}
    {{MODEL{{$ ../__item_index__/__value__}}_VERIFY_PASSWORD}}
    {{MODEL{{$ ../__item_index__/__value__}}_GET_PROPERTY_LIST}}

    /* {{@snippet:end_model_declaration}} */
}
// END: Class Declaration
?>