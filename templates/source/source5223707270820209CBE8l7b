<?php

namespace App\Http\Controllers\AdminLTE\HTMLDB;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use App\AdminLTE\AdminLTE;
use App\AdminLTE\AdminLTEModelOption;
use App\{{$ __value__}};
use App\HTMLDB\HTMLDB;

class {{$ __value__}}Controller extends Controller
{
	public $columns = [];
    public $protectedColumns = [];
    public $row = [];
    public $form_columns = [
        'id'
{{MODEL{{$ ../__item_index__/__value__}}_FORM_COLUMNS}}
    ];
	public $form_delete_columns = [
        'id'
		,'idcsv'
    ];

    public function check()
    {
        $result = [
            'lastError' => '',
            'errorCount' => 0,
            'lastMessage' => '',
            'messageCount' => 0
        ];

        /* {{@snippet:begin_check_values}} */
{{MODEL{{$ ../__item_index__/__value__}}_CHECK_REQUIRED_PROPERTY}}
        /* {{@snippet:end_check_values}} */

        return $result;
    }

	public function check_delete()
    {
        $result = [
            'lastError' => '',
            'errorCount' => 0,
            'lastMessage' => '',
            'messageCount' => 0
        ];

        /* {{@snippet:begin_check_values}} */

        if ('' == $this->row['idcsv'])
        {
            $result['errorCount']++;
            if ($result['lastError'] != '') {
                $result['lastError'] .= '<br>';
            } // if ($result['lastError'] != '') {

            $result['lastError'] .= __('Please select records.');
        } // if ('' == $this->row['idcsv'])

        /* {{@snippet:end_check_values}} */

        return $result;
    }

	public function delete(Request $request)
    {
        $objectHTMLDB = new HTMLDB();

        $this->row = $objectHTMLDB->requestPOSTRow(
                $request->all(),
                $this->form_delete_columns,
                $this->protectedColumns,
                0,
                false);

        $result = $this->check_delete();

        if (0 == $result['errorCount'])
        {
            $idcsv = $this->row['idcsv'];
            $ids = explode(',', $idcsv);
            $idCount = count($ids);

            if ($idCount > 0)
            {
                $objects = null;
                $object = null;

                $objects = {{$ __value__}}::where('deleted', false)
                        ->whereIn('id', $ids)
                        ->get();

                foreach ($objects as $object)
                {
                    $object->deleted = 1;
                    $object->save();                
                } // foreach ($objects as $object)

                /*
                ::must_update::
                kullanılabilecek kodlar
                {{$ __value__}}::where('deleted', false)->count();


                includeLibrary('getModelSessionParameters');
                $sessionParameters = getModelSessionParameters('{{$ __value__}}');

                $list{{$ __value__}} = new {{$ __value__}}();
                $list{{$ __value__}}->bufferSize = 1;
                $list{{$ __value__}}->page = 0;
                $list{{$ __value__}}->addFilter('deleted','==', false);
                $list{{$ __value__}}->addSearchText($sessionParameters['searchText']);
                $list{{$ __value__}}->find();

                $sessionParameters['pageCount'] = ceil($list{{$ __value__}}->getPageCount() / $sessionParameters['bufferSize']);
                
                if ($sessionParameters['page'] == $sessionParameters['pageCount']) {
                    if ($sessionParameters['page'] > 0) {
                        $sessionParameters['page']--;
                    }
                }

                includeLibrary('setModelSessionParameters');
                setModelSessionParameters('{{$ __value__}}', $sessionParameters); */
            }
 
        } // if (0 == $result['errorCount'])

        if (0 == $result['errorCount']) {
            $result['messageCount'] = 1;
            $result['lastMessage'] = 'UPDATED';
        } // if (0 == $result['errorCount']) {

        $objectHTMLDB->errorCount = $result['errorCount'];
        $objectHTMLDB->messageCount = $result['messageCount'];
        $objectHTMLDB->lastError = $result['lastError'];
        $objectHTMLDB->lastMessage = $result['lastMessage'];
        $objectHTMLDB->printResponseJSON();
        return;
    }
	
	public function get(Request $request)
    {
        // start: check user get permission
        /*
        ::must_update:: servis izinleri nasıl kontrol ediliyor ?

        $directoryName = basename(dirname(__FILE__));
        $fileName = basename(__FILE__);
    
        includeLibrary('adminlte/checkUserGetPermission');
        $permissionResult = checkUserGetPermission($directoryName, $fileName);
    
        if ($permissionResult['error']) {
            $controller->errorCount = 1;
            $controller->lastError = $permissionResult['error_msg'];
            return false;
        }*/
        // end: check user get permission
        
        $this->columns = [
            'id'
            ,'id/display_text'
            ,'deleted'
            ,'deleted/display_text'
			,'created_at'
            ,'created_at/display_text'
            ,'updated_at'
            ,'updated_at/display_text'{{MODEL{{$ ../__item_index__/__value__}}_HTMLDB_GET_SERVICE_COLUMNS}}
        ];
    
        $list = [];
        
        $parameters = $request->route()->parameters();
        
        if (!isset($parameters['id'])) {
            $objectHTMLDB = new HTMLDB();
            $objectHTMLDB->list = $list;
            $objectHTMLDB->columns = $this->columns;
            $objectHTMLDB->printHTMLDBList();
            return;
        } // if (!isset($parameters['id'])) {
        
        // is new ?
        if ('new' == htmlspecialchars($parameters['id'])) {
            $objectHTMLDB = new HTMLDB();
            $objectHTMLDB->list = $list;
            $objectHTMLDB->columns = $this->columns;
            $objectHTMLDB->printHTMLDBList();
            return;
        } // if (isset($parameters['id']) && ('new' == htmlspecialchars($parameters['id']))) {

        // is list ?
        if ('list' == htmlspecialchars($parameters['id'])) {
            $dateFormat = config('adminlte.date_format');
            $timeFormat = config('adminlte.time_format');
            
            $objectAdminLTE = new AdminLTE();
            
            $object{{$ __value__}}List = {{$ __value__}}::where('deleted', false)
                    ->orderBy('created_at', 'asc')
                    ->get();
        } else if (intval($parameters['id']) > 0) {
            $object{{$ __value__}}List[] = {{$ __value__}}::where('id', intval($parameters['id']))->first();
        } else {
            $objectHTMLDB = new HTMLDB();
            $objectHTMLDB->list = $list;
            $objectHTMLDB->columns = $this->columns;
            $objectHTMLDB->printHTMLDBList();
            return;
        }

        $objectAdminLTE = new AdminLTE();
        $object{{$ __value__}} = NULL;
        $index = 0;

        foreach ($object{{$ __value__}}List as $object{{$ __value__}})
        {
            $displayTexts = $objectAdminLTE->getObjectDisplayTexts('{{$ __value__}}', $object{{$ __value__}});

            $list[$index]['id'] = $object{{$ __value__}}->id;
            $list[$index]['id/display_text'] = $displayTexts['id'];
            $list[$index]['deleted'] = $object{{$ __value__}}->deleted;
            $list[$index]['deleted/display_text'] = $displayTexts['deleted'];
            $list[$index]['created_at'] = $object{{$ __value__}}->created_at;
            $list[$index]['created_at/display_text'] = $displayTexts['created_at'];
            $list[$index]['updated_at'] = $object{{$ __value__}}->updated_at;
            $list[$index]['updated_at/display_text'] = $displayTexts['updated_at'];{{MODEL{{$ ../__item_index__/__value__}}_HTMLDB_GET_SERVICE_ROWS}}

            $index++;
        } // foreach ($object{{$ __value__}}List as $object{{$ __value__}})

        $objectHTMLDB = new HTMLDB();
        $objectHTMLDB->list = $list;
        $objectHTMLDB->columns = $this->columns;
        $objectHTMLDB->printHTMLDBList();
        return;
    }
	
	public function get_files(Request $request) {
        // start: check user get permission
        /*
        ::must_update:: servis izinleri nasıl kontrol ediliyor ?

        $directoryName = basename(dirname(__FILE__));
        $fileName = basename(__FILE__);
    
        includeLibrary('adminlte/checkUserGetPermission');
        $permissionResult = checkUserGetPermission($directoryName, $fileName);
    
        if ($permissionResult['error']) {
            $controller->errorCount = 1;
            $controller->lastError = $permissionResult['error_msg'];
            return false;
        }*/
        // end: check user get permission
        
        $columns = [
            'id',
            'object_property',
            'file_name',
            'path',
            'media_type',
            'extension'
        ];
    
        $list = [];
        
        $parameters = $request->route()->parameters();
        
        if (!isset($parameters['id'])) {
            $objectHTMLDB = new HTMLDB();
            $objectHTMLDB->list = $list;
            $objectHTMLDB->columns = $columns;
            $objectHTMLDB->printHTMLDBList();
            return;
        } // if (!isset($parameters['id'])) {

        $object_id = intval($parameters['id']);

        if (0 == $object_id) {
            $objectHTMLDB = new HTMLDB();
            $objectHTMLDB->list = $list;
            $objectHTMLDB->columns = $columns;
            $objectHTMLDB->printHTMLDBList();
            return;
        } // if (!isset($parameters['id'])) {
        
        $objectAdminLTE = new AdminLTE();
        $files = $objectAdminLTE->get_model_files('{{$ __value__}}', $object_id);
        $index = 0;

        foreach ($files as $fileData) {
            $list[$index]["id"] = $fileData["id"];
            $list[$index]["object_property"] = $fileData["object_property"];
            $list[$index]["file_name"] = $fileData["file_name"];
            $list[$index]["path"] = $fileData["path"];
            $list[$index]["media_type"] = $fileData["media_type"];

            $fileNameTokens = explode('.', $fileData["file_name"]);
            $list[$index]["extension"] = strtolower(end($fileNameTokens));

            $index++;
        }

        $objectHTMLDB = new HTMLDB();
        $objectHTMLDB->list = $list;
        $objectHTMLDB->columns = $columns;
        $objectHTMLDB->printHTMLDBList();
        return;
    }

	public function get_form_delete(Request $request)
    {
        $objectHTMLDB = new HTMLDB();
        $objectHTMLDB->list = array();
        $objectHTMLDB->columns = $this->form_delete_columns;
        $objectHTMLDB->printHTMLDBList();
        return;
    }

    public function get_infoboxvalue(Request $request)
    {
        $this->columns = [
            'id',
            'model',
            'value'
        ];

        $list = array();
        $list[0]['id'] = 1;
        $list[0]['model'] = '{{$ __value__}}';
        
        $list[0]['value'] = {{$ __value__}}::where('deleted', false)->count();

        $objectHTMLDB = new HTMLDB();
        $objectHTMLDB->list = $list;
        $objectHTMLDB->columns = $this->columns;
        $objectHTMLDB->printHTMLDBList();
        return;
    }
    
	public function get_option_list(Request $request)
    {
        // start: check user get permission
        /*
        ::must_update:: servis izinleri nasıl kontrol ediliyor ?

        $directoryName = basename(dirname(__FILE__));
        $fileName = basename(__FILE__);
    
        includeLibrary('adminlte/checkUserGetPermission');
        $permissionResult = checkUserGetPermission($directoryName, $fileName);
    
        if ($permissionResult['error']) {
            $controller->errorCount = 1;
            $controller->lastError = $permissionResult['error_msg'];
            return false;
        }*/
        // end: check user get permission
        
        $this->columns = [
            'id',
            'title',
            'value'
        ];
    
        $list = [];
        
        $parameters = $request->route()->parameters();

        $propertyName = '';
        
        if (isset($parameters['propertyName'])) {
            $propertyName = htmlspecialchars($parameters['propertyName']);
        } // if (isset($parameters['propertyName'])) {
        
        if ('' == $propertyName) {
            $objectHTMLDB = new HTMLDB();
            $objectHTMLDB->list = $list;
            $objectHTMLDB->columns = $this->columns;
            $objectHTMLDB->printHTMLDBList();
            return;
        } // if ('' == $propertyName) {
        
		$optionList = AdminLTEModelOption::where('deleted', false)
            ->where('model', '{{$ __value__/__lowercase_text__}}')
            ->where('property', $propertyName)
            ->orderBy('title', 'desc')
            ->get();

        $index = 0;

        foreach ($optionList as $option)
        {
            $list[$index]['id'] = $option->id;
            $list[$index]['title'] = $option->title;
            $list[$index]['value'] = $option->value;

            $index++;
        } // foreach ($optionList as $option)

        $objectHTMLDB = new HTMLDB();
        $objectHTMLDB->list = $list;
        $objectHTMLDB->columns = $this->columns;
        $objectHTMLDB->printHTMLDBList();
        return;
    }

    public function get_recordgraphdata(Request $request)
    {

        $this->columns = [
            'id',
            'data'
        ];

        $list = [];

        $dateFormat = config('adminlte.date_format');
        $yearMonthFormat = config('adminlte.year_month_format');
        $parameters = $request->route()->parameters();
        
        $objectAdminLTE = new AdminLTE();

        $pageName = '';
        if (isset($parameters['pageName'])) {
            $pageName = htmlspecialchars($parameters['pageName']);
        } // if (isset($parameters['pageName'])) {

        $Widgets = $objectAdminLTE->getPageLayout($pageName);
        $graphProperties = $objectAdminLTE->getRecordGraphProperties(
                $Widgets,
                '{{$ __value__}}');
        
        $graphType = $graphProperties['type'];

        $period = (0 - $graphProperties['period']);
        $fromDate = strtotime($period . ' month');

        $graphData = array();

        $list{{$ __value__}} = {{$ __value__}}::where('deleted', false)
                ->where('created_at', '>=', $fromDate)
                ->orderBy('created_at', 'asc')
                ->get();

        $object{{$ __value__}} = NULL;
        $index = 0;
            
        if ('daily' == $graphType) {
            foreach ($list{{$ __value__}} as $object{{$ __value__}})
            {
                $created_at = $object{{$ __value__}}->created_at->format($dateFormat);

                if (!isset($graphData[$created_at])) {
                    $graphData[$created_at] = 0;
                }

                $graphData[$created_at]++;
            } // for ($i = 0; $i < $count{{$ __value__}}; $i++) {
        } else if ('monthly' == $graphType) {
            foreach ($list{{$ __value__}} as $object{{$ __value__}})
            {
                $created_at = $object{{$ __value__}}->created_at->format($yearMonthFormat);

                if (!isset($graphData[$created_at])) {
                    $graphData[$created_at] = 0;
                }

                $graphData[$created_at]++;
            } // for ($i = 0; $i < $count{{$ __value__}}; $i++) {
        } // if ('daily' == $graphType) {
        
        $keys = array_keys($graphData);
        $countKeys = count($keys);
        
        $graphJSON = '';
        for ($i=0; $i < $countKeys; $i++) {
            $created_at = $keys[$i];
            $countRecord = $graphData[$created_at];

            if ($graphJSON != '') {
                $graphJSON .= ',';
            } // if ($graphJSON != '') {

            $graphJSON .= '{';
            $graphJSON .= ('"date":"' . $created_at . '",');
            $graphJSON .= ('"record":' . $countRecord . '');
            $graphJSON .= '}';
        }
        $graphJSON = ('[' . $graphJSON . ']');


        $list[0]['id'] = 1;
        $list[0]['data'] = rawurlencode($graphJSON);

        $objectHTMLDB = new HTMLDB();
        $objectHTMLDB->list = $list;
        $objectHTMLDB->columns = $this->columns;
        $objectHTMLDB->printHTMLDBList();
        return;
    }

    public function get_recordlist(Request $request)
    {
        $dateFormat = config('adminlte.date_format');
        $timeFormat = config('adminlte.time_format');
        $parameters = $request->route()->parameters();
        
        $pageName = '';
        if (isset($parameters['pageName'])) {
            $pageName = htmlspecialchars($parameters['pageName']);
        } // if (isset($parameters['pageName'])) {

        $columns = [];
        $list = [];
        
        $objectAdminLTE = new AdminLTE();

        $Widgets = $objectAdminLTE->getPageLayout($pageName);
        $variables = $objectAdminLTE->getRecordListValueVariables($Widgets, '{{$ __value__}}');

        if (0 == count($variables)) {
            $variables = array();
        } // if (0 == count($variables)) {

        $bufferSize = $objectAdminLTE->getRecordListLimit($request, $Widgets, '{{$ __value__}}');
        $showLastRecord = $objectAdminLTE->getRecordListType($Widgets, '{{$ __value__}}');

        if (0 == $bufferSize) {
            $bufferSize = 10;
        } // if (0 == $bufferSize) {
        
        if ($showLastRecord) {
            $sortingColumn = 'id';
            $sortingAscending = false;
            $searchText = '';
            $page = 1;
        } else {
            $sessionParameters = $objectAdminLTE->getModelSessionParameters($request, '{{$ __value__}}');

            $sortingColumn = isset($sessionParameters['sortingColumn'])
                    ? htmlspecialchars($sessionParameters['sortingColumn'])
                    : 'id';

            /*if ('id' != $sortingColumn) {
                $sortingColumn = $objectAdminLTE->getSortVariable('{{$ __value__}}', $sortingColumn);
            }*/

            $sortingAscending = isset($sessionParameters['sortingASC'])
                    ? (1 == intval($sessionParameters['sortingASC']))
                    : false;

            $searchText = isset($sessionParameters['searchText'])
                    ? $sessionParameters['searchText']
                    : '';

            $page = isset($sessionParameters['page'])
                    ? $sessionParameters['page']
                    : 0;

            $page++;
        }

        $defaultColumns = [
            'id/display_text'
            ,'deleted'
            ,'deleted/display_text'
            ,'created_at'
            ,'created_at/display_text'
            ,'updated_at'
            ,'updated_at/display_text'
    {{MODEL{{$ ../__item_index__/__value__}}_HTMLDB_GETRECORDLIST_SERVICE_COLUMNS}}
        ];
        
        $countDefaultColumns = count($defaultColumns);
        $this->columns = array();
        $this->columns[] = 'id';

        for ($i=0; $i < $countDefaultColumns; $i++) {
            $defaultColumn = $defaultColumns[$i];

            if (in_array($defaultColumn, $variables)) {
                $this->columns[] = $defaultColumns[$i];
            } // if (in_array($defaultColumn, $variables)) {
        } // for ($i=0; $i < $countDefaultColumns; $i++) {

		$list{{$ __value__}} = {{$ __value__}}::defaultQuery($searchText, $sortingColumn, ($sortingAscending ? 'asc' : 'desc'))
				->paginate($bufferSize, ['*'], 'page', $page);

        $sessionObject = [
            'searchText' => '',
            'sortingColumn' => $sortingColumn,
            'sortingASC' => ($sortingAscending ? 1 : 0),
            'page' => ($list{{$ __value__}}->currentPage() - 1),
            'pageCount' => $list{{$ __value__}}->lastPage(),
            'bufferSize' => $bufferSize
        ];

        $objectAdminLTE = new AdminLTE();
        $objectAdminLTE->setModelSessionParameters($request, '{{$ __value__}}', $sessionObject);

        $object{{$ __value__}} = NULL;
        $index = 0;

        foreach ($list{{$ __value__}} as $object{{$ __value__}})
        {
            $displayTexts = $objectAdminLTE->getObjectDisplayTexts('{{$ __value__}}', $object{{$ __value__}});

            $list[$index]['id'] = $object{{$ __value__}}->id;
        
            if (in_array('id/display_text', $variables)) {
                $list[$index]['id/display_text'] = $displayTexts['id'];
            } // if (in_array('id/display_text', $variables)) {

            if (in_array('deleted', $variables)) {
                $list[$index]['deleted'] = $object{{$ __value__}}->deleted;
            } // if (in_array('deleted', $variables)) {

            if (in_array('deleted/display_text', $variables)) {
                $list[$index]['deleted/display_text'] = $displayTexts['deleted'];
            } // if (in_array('deleted/display_text', $variables)) {

            if (in_array('created_at', $variables)) {
                $list[$index]['created_at'] = $object{{$ __value__}}->created_at;
            } // if (in_array('created_at', $variables)) {

            if (in_array('created_at/display_text', $variables)) {
                $list[$index]['created_at/display_text'] = $displayTexts['created_at'];
            } // if (in_array('created_at/display_text', $variables)) {
            
            if (in_array('updated_at', $variables)) {
                $list[$index]['updated_at'] = $object{{$ __value__}}->updated_at;
            } // if (in_array('updated_at', $variables)) {

            if (in_array('updated_at/display_text', $variables)) {
                $list[$index]['updated_at/display_text'] = $displayTexts['updated_at'];
            } // if (in_array('updated_at/display_text', $variables)) {
    {{MODEL{{$ ../__item_index__/__value__}}_HTMLDB_GETRECORDLIST_SERVICE_ROWS}}

            $index++;
        } // foreach ($list{{$ __value__}} as $object{{$ __value__}})

        $objectHTMLDB = new HTMLDB();
        $objectHTMLDB->list = $list;
        $objectHTMLDB->columns = $this->columns;
        $objectHTMLDB->printHTMLDBList();
        return;
    }

	public function get_session(Request $request)
    {
        
        $this->columns = [
            'id',
            'searchText',
            'sortingColumn',
            'sortingASC',
            'page',
            'pageCount',
            'bufferSize'
        ];

        $objectAdminLTE = new AdminLTE();
        $parameters = $request->route()->parameters();

        $list = [];

        $sessionParameters = $objectAdminLTE->getModelSessionParameters($request, '{{$ __value__}}');
        
        if (!isset($sessionParameters['page'])) {
            $pageName = '';

            if (isset($parameters['pageName'])) {
                $pageName = htmlspecialchars($parameters['pageName']);
            } // if (isset($parameters['pageName'])) {

            $Widgets = $objectAdminLTE->getPageLayout($pageName);
            $bufferSize = $objectAdminLTE->getRecordListLimit($request, $Widgets, '{{$ __value__}}');

            $pageCount = ceil({{$ __value__}}::where('deleted', false)->count() / $bufferSize);

            $sessionObject = [
                'searchText' => '',
                'sortingColumn' => 'id',
                'sortingASC' => 2,
                'page' => 1,
                'pageCount' => $pageCount,
                'bufferSize' => $bufferSize
            ];

            $objectAdminLTE->setModelSessionParameters($request, '{{$ __value__}}', $sessionObject);
        }

        $sessionParameters = $objectAdminLTE->getModelSessionParameters($request, '{{$ __value__}}');
        $sessionParameters['id'] = 1;

        $columnCount = count($this->columns);

        for ($i = 0; $i < $columnCount; $i++) {
            $list[0][$this->columns[$i]]
                    = isset($sessionParameters[$this->columns[$i]])
                    ? $sessionParameters[$this->columns[$i]]
                    : '';
        } // for ($i = 0; $i < $columnCount; $i++) {

        $objectHTMLDB = new HTMLDB();
        $objectHTMLDB->list = $list;
        $objectHTMLDB->columns = $this->columns;
        $objectHTMLDB->printHTMLDBList();
        return;
    }
	
	public function post(Request $request)
    {
        $objectHTMLDB = new HTMLDB();

        $this->row = $objectHTMLDB->requestPOSTRow(
                $request->all(),
                $this->form_columns,
                $this->protectedColumns,
                0,
                false);

        $result = $this->check();

        if (0 == $result['errorCount'])
        {
            $id = intval($this->row['id']);

            if ($id > 0) {
                $object{{$ __value__}} = {{$ __value__}}::find($id);
            } else {
                $object{{$ __value__}} = new {{$ __value__}}();
            } // if ($id > 0) {

            $object{{$ __value__}}->deleted = 0;
{{MODEL{{$ ../__item_index__/__value__}}_HTMLDB_POST_SERVICE_PROPERTY_PROCESS}}

            $object{{$ __value__}}->save();
			$objectAdminLTE = new AdminLTE();{{MODEL{{$ ../__item_index__/__value__}}_HTMLDB_POST_SERVICE_FILE_AND_IMAGE_PROCESS}}

{{MODEL{{$ ../__item_index__/__value__}}_HTMLDB_POST_SERVICE_CLASSSELECTION_PROCESS}}
{{MODEL{{$ ../__item_index__/__value__}}_HTMLDB_POST_SERVICE_SELECTION_PROCESS}}

			$request->session()->put(sha1('{{$ __value__/__lowercase_text__}}_lastid'), $object{{$ __value__}}->id);
        } // if (0 == $result['errorCount']) {
        
        $objectHTMLDB->lastError = $result['lastError'];
        $objectHTMLDB->errorCount = $result['errorCount'];
        $objectHTMLDB->lastMessage = $result['lastMessage'];
        $objectHTMLDB->messageCount = $result['messageCount'];

        $objectHTMLDB->printResponseJSON();
        return;
    }

	public function post_session(Request $request)
    {
        $objectAdminLTE = new AdminLTE();
        $objectHTMLDB = new HTMLDB();

        $sessionParameters = $objectAdminLTE->getModelSessionParameters($request, '{{$ __value__}}');

        $this->columns = [
            'searchText',
            'sortingColumn',
            'sortingASC',
            'page',
            'bufferSize',
            'pageCount'
        ];

        $this->row = $objectHTMLDB->requestPOSTRow(
                $request->all(),
                $this->columns,
                $this->protectedColumns,
                0,
                true);

        $sessionParameters['searchText']
                = isset($this->row['searchText'])
                ? htmlspecialchars($this->row['searchText'])
                : $sessionParameters['searchText'];

        $sessionParameters['sortingColumn']
                = isset($this->row['sortingColumn'])
                ? htmlspecialchars($this->row['sortingColumn'])
                : $sessionParameters['sortingColumn'];

        $sessionParameters['sortingASC']
                = isset($this->row['sortingASC'])
                ? intval($this->row['sortingASC'])
                : $sessionParameters['sortingASC'];

        $sessionParameters['page']
                = isset($this->row['page'])
                ? intval($this->row['page'])
                : $sessionParameters['page'];

        $sessionParameters['bufferSize']
                = isset($this->row['bufferSize'])
                ? intval($this->row['bufferSize'])
                : $sessionParameters['bufferSize'];
        
        if (0 == $sessionParameters['bufferSize'])
        {
            $sessionParameters['pageCount'] = 0;
        }
        else
        {
			$objectList = {{$ __value__}}::defaultQuery($sessionParameters['searchText'], '', '')
				->paginate($sessionParameters['bufferSize'], ['*'], 'page', $sessionParameters['page']);
            $sessionParameters['pageCount'] = ceil($objectList->total() / $sessionParameters['bufferSize']);
        } // if (0 == $sessionParameters['bufferSize'])
        
        $objectAdminLTE->setModelSessionParameters($request, '{{$ __value__}}', $sessionParameters);

        $objectHTMLDB->printResponseJSON();
        return;
    }
}